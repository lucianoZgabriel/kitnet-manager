// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: tenants.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const countTenants = `-- name: CountTenants :one
SELECT COUNT(*) FROM tenants
`

func (q *Queries) CountTenants(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countTenants)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createTenant = `-- name: CreateTenant :one
INSERT INTO tenants (
    id,
    full_name,
    cpf,
    phone,
    email,
    id_document_type,
    id_document_number,
    created_at,
    updated_at
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9
) RETURNING id, full_name, cpf, phone, email, id_document_type, id_document_number, created_at, updated_at
`

type CreateTenantParams struct {
	ID               uuid.UUID      `json:"id"`
	FullName         string         `json:"full_name"`
	Cpf              string         `json:"cpf"`
	Phone            string         `json:"phone"`
	Email            sql.NullString `json:"email"`
	IDDocumentType   sql.NullString `json:"id_document_type"`
	IDDocumentNumber sql.NullString `json:"id_document_number"`
	CreatedAt        time.Time      `json:"created_at"`
	UpdatedAt        time.Time      `json:"updated_at"`
}

func (q *Queries) CreateTenant(ctx context.Context, arg CreateTenantParams) (Tenant, error) {
	row := q.db.QueryRowContext(ctx, createTenant,
		arg.ID,
		arg.FullName,
		arg.Cpf,
		arg.Phone,
		arg.Email,
		arg.IDDocumentType,
		arg.IDDocumentNumber,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Tenant
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Cpf,
		&i.Phone,
		&i.Email,
		&i.IDDocumentType,
		&i.IDDocumentNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTenant = `-- name: DeleteTenant :exec
DELETE FROM tenants
WHERE id = $1
`

func (q *Queries) DeleteTenant(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteTenant, id)
	return err
}

const getTenantByCPF = `-- name: GetTenantByCPF :one
SELECT id, full_name, cpf, phone, email, id_document_type, id_document_number, created_at, updated_at FROM tenants
WHERE cpf = $1
LIMIT 1
`

func (q *Queries) GetTenantByCPF(ctx context.Context, cpf string) (Tenant, error) {
	row := q.db.QueryRowContext(ctx, getTenantByCPF, cpf)
	var i Tenant
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Cpf,
		&i.Phone,
		&i.Email,
		&i.IDDocumentType,
		&i.IDDocumentNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTenantByID = `-- name: GetTenantByID :one
SELECT id, full_name, cpf, phone, email, id_document_type, id_document_number, created_at, updated_at FROM tenants
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetTenantByID(ctx context.Context, id uuid.UUID) (Tenant, error) {
	row := q.db.QueryRowContext(ctx, getTenantByID, id)
	var i Tenant
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Cpf,
		&i.Phone,
		&i.Email,
		&i.IDDocumentType,
		&i.IDDocumentNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listTenants = `-- name: ListTenants :many
SELECT id, full_name, cpf, phone, email, id_document_type, id_document_number, created_at, updated_at FROM tenants
ORDER BY full_name ASC
`

func (q *Queries) ListTenants(ctx context.Context) ([]Tenant, error) {
	rows, err := q.db.QueryContext(ctx, listTenants)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Tenant{}
	for rows.Next() {
		var i Tenant
		if err := rows.Scan(
			&i.ID,
			&i.FullName,
			&i.Cpf,
			&i.Phone,
			&i.Email,
			&i.IDDocumentType,
			&i.IDDocumentNumber,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchTenantsByName = `-- name: SearchTenantsByName :many
SELECT id, full_name, cpf, phone, email, id_document_type, id_document_number, created_at, updated_at FROM tenants
WHERE full_name ILIKE '%' || $1 || '%'
ORDER BY full_name ASC
`

func (q *Queries) SearchTenantsByName(ctx context.Context, dollar_1 sql.NullString) ([]Tenant, error) {
	rows, err := q.db.QueryContext(ctx, searchTenantsByName, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Tenant{}
	for rows.Next() {
		var i Tenant
		if err := rows.Scan(
			&i.ID,
			&i.FullName,
			&i.Cpf,
			&i.Phone,
			&i.Email,
			&i.IDDocumentType,
			&i.IDDocumentNumber,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const tenantExistsByCPF = `-- name: TenantExistsByCPF :one
SELECT EXISTS(
    SELECT 1 FROM tenants WHERE cpf = $1
) AS exists
`

func (q *Queries) TenantExistsByCPF(ctx context.Context, cpf string) (bool, error) {
	row := q.db.QueryRowContext(ctx, tenantExistsByCPF, cpf)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const updateTenant = `-- name: UpdateTenant :one
UPDATE tenants
SET
    full_name = $2,
    phone = $3,
    email = $4,
    id_document_type = $5,
    id_document_number = $6,
    updated_at = $7
WHERE id = $1
RETURNING id, full_name, cpf, phone, email, id_document_type, id_document_number, created_at, updated_at
`

type UpdateTenantParams struct {
	ID               uuid.UUID      `json:"id"`
	FullName         string         `json:"full_name"`
	Phone            string         `json:"phone"`
	Email            sql.NullString `json:"email"`
	IDDocumentType   sql.NullString `json:"id_document_type"`
	IDDocumentNumber sql.NullString `json:"id_document_number"`
	UpdatedAt        time.Time      `json:"updated_at"`
}

func (q *Queries) UpdateTenant(ctx context.Context, arg UpdateTenantParams) (Tenant, error) {
	row := q.db.QueryRowContext(ctx, updateTenant,
		arg.ID,
		arg.FullName,
		arg.Phone,
		arg.Email,
		arg.IDDocumentType,
		arg.IDDocumentNumber,
		arg.UpdatedAt,
	)
	var i Tenant
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Cpf,
		&i.Phone,
		&i.Email,
		&i.IDDocumentType,
		&i.IDDocumentNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
