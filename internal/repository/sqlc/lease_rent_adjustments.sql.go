// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: lease_rent_adjustments.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const countAdjustmentsByLeaseID = `-- name: CountAdjustmentsByLeaseID :one
SELECT COUNT(*) FROM lease_rent_adjustments
WHERE lease_id = $1
`

func (q *Queries) CountAdjustmentsByLeaseID(ctx context.Context, leaseID uuid.UUID) (int64, error) {
	row := q.db.QueryRowContext(ctx, countAdjustmentsByLeaseID, leaseID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createLeaseRentAdjustment = `-- name: CreateLeaseRentAdjustment :one
INSERT INTO lease_rent_adjustments (
    id,
    lease_id,
    previous_rent_value,
    new_rent_value,
    adjustment_percentage,
    applied_at,
    reason,
    applied_by,
    created_at
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9
) RETURNING id, lease_id, previous_rent_value, new_rent_value, adjustment_percentage, applied_at, reason, applied_by, created_at
`

type CreateLeaseRentAdjustmentParams struct {
	ID                   uuid.UUID      `json:"id"`
	LeaseID              uuid.UUID      `json:"lease_id"`
	PreviousRentValue    string         `json:"previous_rent_value"`
	NewRentValue         string         `json:"new_rent_value"`
	AdjustmentPercentage string         `json:"adjustment_percentage"`
	AppliedAt            time.Time      `json:"applied_at"`
	Reason               sql.NullString `json:"reason"`
	AppliedBy            uuid.NullUUID  `json:"applied_by"`
	CreatedAt            time.Time      `json:"created_at"`
}

func (q *Queries) CreateLeaseRentAdjustment(ctx context.Context, arg CreateLeaseRentAdjustmentParams) (LeaseRentAdjustment, error) {
	row := q.db.QueryRowContext(ctx, createLeaseRentAdjustment,
		arg.ID,
		arg.LeaseID,
		arg.PreviousRentValue,
		arg.NewRentValue,
		arg.AdjustmentPercentage,
		arg.AppliedAt,
		arg.Reason,
		arg.AppliedBy,
		arg.CreatedAt,
	)
	var i LeaseRentAdjustment
	err := row.Scan(
		&i.ID,
		&i.LeaseID,
		&i.PreviousRentValue,
		&i.NewRentValue,
		&i.AdjustmentPercentage,
		&i.AppliedAt,
		&i.Reason,
		&i.AppliedBy,
		&i.CreatedAt,
	)
	return i, err
}

const deleteLeaseRentAdjustment = `-- name: DeleteLeaseRentAdjustment :exec
DELETE FROM lease_rent_adjustments
WHERE id = $1
`

func (q *Queries) DeleteLeaseRentAdjustment(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteLeaseRentAdjustment, id)
	return err
}

const getLatestAdjustmentByLeaseID = `-- name: GetLatestAdjustmentByLeaseID :one
SELECT id, lease_id, previous_rent_value, new_rent_value, adjustment_percentage, applied_at, reason, applied_by, created_at FROM lease_rent_adjustments
WHERE lease_id = $1
ORDER BY applied_at DESC
LIMIT 1
`

func (q *Queries) GetLatestAdjustmentByLeaseID(ctx context.Context, leaseID uuid.UUID) (LeaseRentAdjustment, error) {
	row := q.db.QueryRowContext(ctx, getLatestAdjustmentByLeaseID, leaseID)
	var i LeaseRentAdjustment
	err := row.Scan(
		&i.ID,
		&i.LeaseID,
		&i.PreviousRentValue,
		&i.NewRentValue,
		&i.AdjustmentPercentage,
		&i.AppliedAt,
		&i.Reason,
		&i.AppliedBy,
		&i.CreatedAt,
	)
	return i, err
}

const getLeaseRentAdjustmentByID = `-- name: GetLeaseRentAdjustmentByID :one
SELECT id, lease_id, previous_rent_value, new_rent_value, adjustment_percentage, applied_at, reason, applied_by, created_at FROM lease_rent_adjustments
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetLeaseRentAdjustmentByID(ctx context.Context, id uuid.UUID) (LeaseRentAdjustment, error) {
	row := q.db.QueryRowContext(ctx, getLeaseRentAdjustmentByID, id)
	var i LeaseRentAdjustment
	err := row.Scan(
		&i.ID,
		&i.LeaseID,
		&i.PreviousRentValue,
		&i.NewRentValue,
		&i.AdjustmentPercentage,
		&i.AppliedAt,
		&i.Reason,
		&i.AppliedBy,
		&i.CreatedAt,
	)
	return i, err
}

const listLeaseRentAdjustmentsByLeaseID = `-- name: ListLeaseRentAdjustmentsByLeaseID :many
SELECT id, lease_id, previous_rent_value, new_rent_value, adjustment_percentage, applied_at, reason, applied_by, created_at FROM lease_rent_adjustments
WHERE lease_id = $1
ORDER BY applied_at DESC
`

func (q *Queries) ListLeaseRentAdjustmentsByLeaseID(ctx context.Context, leaseID uuid.UUID) ([]LeaseRentAdjustment, error) {
	rows, err := q.db.QueryContext(ctx, listLeaseRentAdjustmentsByLeaseID, leaseID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []LeaseRentAdjustment{}
	for rows.Next() {
		var i LeaseRentAdjustment
		if err := rows.Scan(
			&i.ID,
			&i.LeaseID,
			&i.PreviousRentValue,
			&i.NewRentValue,
			&i.AdjustmentPercentage,
			&i.AppliedAt,
			&i.Reason,
			&i.AppliedBy,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
