// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: dashboard.sql

package sqlc

import (
	"context"
)

const getMonthlyProjectedRevenue = `-- name: GetMonthlyProjectedRevenue :one
SELECT COALESCE(SUM(monthly_rent_value), 0)::TEXT as total
FROM leases
WHERE status = 'active'
`

func (q *Queries) GetMonthlyProjectedRevenue(ctx context.Context) (string, error) {
	row := q.db.QueryRowContext(ctx, getMonthlyProjectedRevenue)
	var total string
	err := row.Scan(&total)
	return total, err
}

const getMonthlyRealizedRevenue = `-- name: GetMonthlyRealizedRevenue :one
SELECT COALESCE(SUM(amount), 0)::TEXT as total
FROM payments
WHERE status = 'paid'
  AND payment_type = 'rent'
  AND DATE_TRUNC('month', payment_date) = DATE_TRUNC('month', CURRENT_DATE)
`

func (q *Queries) GetMonthlyRealizedRevenue(ctx context.Context) (string, error) {
	row := q.db.QueryRowContext(ctx, getMonthlyRealizedRevenue)
	var total string
	err := row.Scan(&total)
	return total, err
}

const getOccupancyMetrics = `-- name: GetOccupancyMetrics :one
SELECT
    COUNT(*) as total_units,
    COUNT(*) FILTER (WHERE status = 'occupied') as occupied_units,
    COUNT(*) FILTER (WHERE status = 'available') as available_units,
    COUNT(*) FILTER (WHERE status = 'maintenance') as maintenance_units,
    COUNT(*) FILTER (WHERE status = 'renovation') as renovation_units
FROM units
`

type GetOccupancyMetricsRow struct {
	TotalUnits       int64 `json:"total_units"`
	OccupiedUnits    int64 `json:"occupied_units"`
	AvailableUnits   int64 `json:"available_units"`
	MaintenanceUnits int64 `json:"maintenance_units"`
	RenovationUnits  int64 `json:"renovation_units"`
}

func (q *Queries) GetOccupancyMetrics(ctx context.Context) (GetOccupancyMetricsRow, error) {
	row := q.db.QueryRowContext(ctx, getOccupancyMetrics)
	var i GetOccupancyMetricsRow
	err := row.Scan(
		&i.TotalUnits,
		&i.OccupiedUnits,
		&i.AvailableUnits,
		&i.MaintenanceUnits,
		&i.RenovationUnits,
	)
	return i, err
}

const getOverdueAmount = `-- name: GetOverdueAmount :one
SELECT COALESCE(SUM(amount), 0)::TEXT as total
FROM payments
WHERE status = 'overdue'
`

func (q *Queries) GetOverdueAmount(ctx context.Context) (string, error) {
	row := q.db.QueryRowContext(ctx, getOverdueAmount)
	var total string
	err := row.Scan(&total)
	return total, err
}

const getTotalPendingAmount = `-- name: GetTotalPendingAmount :one
SELECT COALESP(SUM(amount), 0)::TEXT as total
FROM payments
WHERE status IN ('pending', 'overdue')
`

func (q *Queries) GetTotalPendingAmount(ctx context.Context) (string, error) {
	row := q.db.QueryRowContext(ctx, getTotalPendingAmount)
	var total string
	err := row.Scan(&total)
	return total, err
}
