// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0

package sqlc

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

type UnitStatus string

const (
	UnitStatusAvailable   UnitStatus = "available"
	UnitStatusOccupied    UnitStatus = "occupied"
	UnitStatusMaintenance UnitStatus = "maintenance"
	UnitStatusRenovation  UnitStatus = "renovation"
)

func (e *UnitStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UnitStatus(s)
	case string:
		*e = UnitStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for UnitStatus: %T", src)
	}
	return nil
}

type NullUnitStatus struct {
	UnitStatus UnitStatus `json:"unit_status"`
	Valid      bool       `json:"valid"` // Valid is true if UnitStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUnitStatus) Scan(value interface{}) error {
	if value == nil {
		ns.UnitStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UnitStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUnitStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UnitStatus), nil
}

type UserRole string

const (
	UserRoleAdmin   UserRole = "admin"
	UserRoleManager UserRole = "manager"
	UserRoleViewer  UserRole = "viewer"
)

func (e *UserRole) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserRole(s)
	case string:
		*e = UserRole(s)
	default:
		return fmt.Errorf("unsupported scan type for UserRole: %T", src)
	}
	return nil
}

type NullUserRole struct {
	UserRole UserRole `json:"user_role"`
	Valid    bool     `json:"valid"` // Valid is true if UserRole is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserRole) Scan(value interface{}) error {
	if value == nil {
		ns.UserRole, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserRole.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserRole), nil
}

type Lease struct {
	ID                      uuid.UUID `json:"id"`
	UnitID                  uuid.UUID `json:"unit_id"`
	TenantID                uuid.UUID `json:"tenant_id"`
	ContractSignedDate      time.Time `json:"contract_signed_date"`
	StartDate               time.Time `json:"start_date"`
	EndDate                 time.Time `json:"end_date"`
	PaymentDueDay           int32     `json:"payment_due_day"`
	MonthlyRentValue        string    `json:"monthly_rent_value"`
	PaintingFeeTotal        string    `json:"painting_fee_total"`
	PaintingFeeInstallments int32     `json:"painting_fee_installments"`
	PaintingFeePaid         string    `json:"painting_fee_paid"`
	Status                  string    `json:"status"`
	CreatedAt               time.Time `json:"created_at"`
	UpdatedAt               time.Time `json:"updated_at"`
}

type Payment struct {
	ID             uuid.UUID      `json:"id"`
	LeaseID        uuid.UUID      `json:"lease_id"`
	PaymentType    string         `json:"payment_type"`
	ReferenceMonth time.Time      `json:"reference_month"`
	Amount         string         `json:"amount"`
	Status         string         `json:"status"`
	DueDate        time.Time      `json:"due_date"`
	PaymentDate    sql.NullTime   `json:"payment_date"`
	PaymentMethod  sql.NullString `json:"payment_method"`
	ProofUrl       sql.NullString `json:"proof_url"`
	Notes          sql.NullString `json:"notes"`
	CreatedAt      time.Time      `json:"created_at"`
	UpdatedAt      time.Time      `json:"updated_at"`
}

type Tenant struct {
	ID               uuid.UUID      `json:"id"`
	FullName         string         `json:"full_name"`
	Cpf              string         `json:"cpf"`
	Phone            string         `json:"phone"`
	Email            sql.NullString `json:"email"`
	IDDocumentType   sql.NullString `json:"id_document_type"`
	IDDocumentNumber sql.NullString `json:"id_document_number"`
	CreatedAt        time.Time      `json:"created_at"`
	UpdatedAt        time.Time      `json:"updated_at"`
}

type Unit struct {
	ID                 uuid.UUID       `json:"id"`
	Number             string          `json:"number"`
	Floor              int32           `json:"floor"`
	Status             UnitStatus      `json:"status"`
	IsRenovated        bool            `json:"is_renovated"`
	BaseRentValue      decimal.Decimal `json:"base_rent_value"`
	RenovatedRentValue decimal.Decimal `json:"renovated_rent_value"`
	CurrentRentValue   decimal.Decimal `json:"current_rent_value"`
	Notes              sql.NullString  `json:"notes"`
	CreatedAt          time.Time       `json:"created_at"`
	UpdatedAt          time.Time       `json:"updated_at"`
}

type User struct {
	ID           uuid.UUID    `json:"id"`
	Username     string       `json:"username"`
	PasswordHash string       `json:"password_hash"`
	Role         UserRole     `json:"role"`
	IsActive     bool         `json:"is_active"`
	LastLoginAt  sql.NullTime `json:"last_login_at"`
	CreatedAt    time.Time    `json:"created_at"`
	UpdatedAt    time.Time    `json:"updated_at"`
}
