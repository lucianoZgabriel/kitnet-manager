// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0

package sqlc

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

type UnitStatus string

const (
	UnitStatusAvailable   UnitStatus = "available"
	UnitStatusOccupied    UnitStatus = "occupied"
	UnitStatusMaintenance UnitStatus = "maintenance"
	UnitStatusRenovation  UnitStatus = "renovation"
)

func (e *UnitStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UnitStatus(s)
	case string:
		*e = UnitStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for UnitStatus: %T", src)
	}
	return nil
}

type NullUnitStatus struct {
	UnitStatus UnitStatus `json:"unit_status"`
	Valid      bool       `json:"valid"` // Valid is true if UnitStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUnitStatus) Scan(value interface{}) error {
	if value == nil {
		ns.UnitStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UnitStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUnitStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UnitStatus), nil
}

type Unit struct {
	ID                 uuid.UUID       `json:"id"`
	Number             string          `json:"number"`
	Floor              int32           `json:"floor"`
	Status             UnitStatus      `json:"status"`
	IsRenovated        bool            `json:"is_renovated"`
	BaseRentValue      decimal.Decimal `json:"base_rent_value"`
	RenovatedRentValue decimal.Decimal `json:"renovated_rent_value"`
	CurrentRentValue   decimal.Decimal `json:"current_rent_value"`
	Notes              sql.NullString  `json:"notes"`
	CreatedAt          time.Time       `json:"created_at"`
	UpdatedAt          time.Time       `json:"updated_at"`
}
