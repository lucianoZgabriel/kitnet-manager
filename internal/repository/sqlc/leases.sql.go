// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: leases.sql

package sqlc

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const countLeases = `-- name: CountLeases :one
SELECT COUNT(*) FROM leases
`

func (q *Queries) CountLeases(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countLeases)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countLeasesByStatus = `-- name: CountLeasesByStatus :one
SELECT COUNT(*) FROM leases
WHERE status = $1
`

func (q *Queries) CountLeasesByStatus(ctx context.Context, status string) (int64, error) {
	row := q.db.QueryRowContext(ctx, countLeasesByStatus, status)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createLease = `-- name: CreateLease :one
INSERT INTO leases (
    id,
    unit_id,
    tenant_id,
    contract_signed_date,
    start_date,
    end_date,
    payment_due_day,
    monthly_rent_value,
    painting_fee_total,
    painting_fee_installments,
    painting_fee_paid,
    status,
    created_at,
    updated_at
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14
) RETURNING id, unit_id, tenant_id, contract_signed_date, start_date, end_date, payment_due_day, monthly_rent_value, painting_fee_total, painting_fee_installments, painting_fee_paid, status, created_at, updated_at
`

type CreateLeaseParams struct {
	ID                      uuid.UUID `json:"id"`
	UnitID                  uuid.UUID `json:"unit_id"`
	TenantID                uuid.UUID `json:"tenant_id"`
	ContractSignedDate      time.Time `json:"contract_signed_date"`
	StartDate               time.Time `json:"start_date"`
	EndDate                 time.Time `json:"end_date"`
	PaymentDueDay           int32     `json:"payment_due_day"`
	MonthlyRentValue        string    `json:"monthly_rent_value"`
	PaintingFeeTotal        string    `json:"painting_fee_total"`
	PaintingFeeInstallments int32     `json:"painting_fee_installments"`
	PaintingFeePaid         string    `json:"painting_fee_paid"`
	Status                  string    `json:"status"`
	CreatedAt               time.Time `json:"created_at"`
	UpdatedAt               time.Time `json:"updated_at"`
}

func (q *Queries) CreateLease(ctx context.Context, arg CreateLeaseParams) (Lease, error) {
	row := q.db.QueryRowContext(ctx, createLease,
		arg.ID,
		arg.UnitID,
		arg.TenantID,
		arg.ContractSignedDate,
		arg.StartDate,
		arg.EndDate,
		arg.PaymentDueDay,
		arg.MonthlyRentValue,
		arg.PaintingFeeTotal,
		arg.PaintingFeeInstallments,
		arg.PaintingFeePaid,
		arg.Status,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Lease
	err := row.Scan(
		&i.ID,
		&i.UnitID,
		&i.TenantID,
		&i.ContractSignedDate,
		&i.StartDate,
		&i.EndDate,
		&i.PaymentDueDay,
		&i.MonthlyRentValue,
		&i.PaintingFeeTotal,
		&i.PaintingFeeInstallments,
		&i.PaintingFeePaid,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteLease = `-- name: DeleteLease :exec
DELETE FROM leases
WHERE id = $1
`

func (q *Queries) DeleteLease(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteLease, id)
	return err
}

const getActiveLeaseByTenantID = `-- name: GetActiveLeaseByTenantID :one
SELECT id, unit_id, tenant_id, contract_signed_date, start_date, end_date, payment_due_day, monthly_rent_value, painting_fee_total, painting_fee_installments, painting_fee_paid, status, created_at, updated_at FROM leases
WHERE tenant_id = $1 AND status = 'active'
LIMIT 1
`

func (q *Queries) GetActiveLeaseByTenantID(ctx context.Context, tenantID uuid.UUID) (Lease, error) {
	row := q.db.QueryRowContext(ctx, getActiveLeaseByTenantID, tenantID)
	var i Lease
	err := row.Scan(
		&i.ID,
		&i.UnitID,
		&i.TenantID,
		&i.ContractSignedDate,
		&i.StartDate,
		&i.EndDate,
		&i.PaymentDueDay,
		&i.MonthlyRentValue,
		&i.PaintingFeeTotal,
		&i.PaintingFeeInstallments,
		&i.PaintingFeePaid,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getActiveLeaseByUnitID = `-- name: GetActiveLeaseByUnitID :one
SELECT id, unit_id, tenant_id, contract_signed_date, start_date, end_date, payment_due_day, monthly_rent_value, painting_fee_total, painting_fee_installments, painting_fee_paid, status, created_at, updated_at FROM leases
WHERE unit_id = $1 AND status = 'active'
LIMIT 1
`

func (q *Queries) GetActiveLeaseByUnitID(ctx context.Context, unitID uuid.UUID) (Lease, error) {
	row := q.db.QueryRowContext(ctx, getActiveLeaseByUnitID, unitID)
	var i Lease
	err := row.Scan(
		&i.ID,
		&i.UnitID,
		&i.TenantID,
		&i.ContractSignedDate,
		&i.StartDate,
		&i.EndDate,
		&i.PaymentDueDay,
		&i.MonthlyRentValue,
		&i.PaintingFeeTotal,
		&i.PaintingFeeInstallments,
		&i.PaintingFeePaid,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getExpiringSoonLeases = `-- name: GetExpiringSoonLeases :many
SELECT id, unit_id, tenant_id, contract_signed_date, start_date, end_date, payment_due_day, monthly_rent_value, painting_fee_total, painting_fee_installments, painting_fee_paid, status, created_at, updated_at FROM leases
WHERE status = 'active' 
  AND end_date <= CURRENT_DATE + INTERVAL '45 days'
  AND end_date > CURRENT_DATE
ORDER BY end_date ASC
`

func (q *Queries) GetExpiringSoonLeases(ctx context.Context) ([]Lease, error) {
	rows, err := q.db.QueryContext(ctx, getExpiringSoonLeases)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Lease{}
	for rows.Next() {
		var i Lease
		if err := rows.Scan(
			&i.ID,
			&i.UnitID,
			&i.TenantID,
			&i.ContractSignedDate,
			&i.StartDate,
			&i.EndDate,
			&i.PaymentDueDay,
			&i.MonthlyRentValue,
			&i.PaintingFeeTotal,
			&i.PaintingFeeInstallments,
			&i.PaintingFeePaid,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLeaseByID = `-- name: GetLeaseByID :one
SELECT id, unit_id, tenant_id, contract_signed_date, start_date, end_date, payment_due_day, monthly_rent_value, painting_fee_total, painting_fee_installments, painting_fee_paid, status, created_at, updated_at FROM leases
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetLeaseByID(ctx context.Context, id uuid.UUID) (Lease, error) {
	row := q.db.QueryRowContext(ctx, getLeaseByID, id)
	var i Lease
	err := row.Scan(
		&i.ID,
		&i.UnitID,
		&i.TenantID,
		&i.ContractSignedDate,
		&i.StartDate,
		&i.EndDate,
		&i.PaymentDueDay,
		&i.MonthlyRentValue,
		&i.PaintingFeeTotal,
		&i.PaintingFeeInstallments,
		&i.PaintingFeePaid,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getLeaseWithDetails = `-- name: GetLeaseWithDetails :one
SELECT 
    l.id, l.unit_id, l.tenant_id, l.contract_signed_date, l.start_date, l.end_date, l.payment_due_day, l.monthly_rent_value, l.painting_fee_total, l.painting_fee_installments, l.painting_fee_paid, l.status, l.created_at, l.updated_at,
    u.number as unit_number,
    u.floor as unit_floor,
    t.full_name as tenant_name,
    t.cpf as tenant_cpf,
    t.phone as tenant_phone
FROM leases l
INNER JOIN units u ON l.unit_id = u.id
INNER JOIN tenants t ON l.tenant_id = t.id
WHERE l.id = $1
LIMIT 1
`

type GetLeaseWithDetailsRow struct {
	ID                      uuid.UUID `json:"id"`
	UnitID                  uuid.UUID `json:"unit_id"`
	TenantID                uuid.UUID `json:"tenant_id"`
	ContractSignedDate      time.Time `json:"contract_signed_date"`
	StartDate               time.Time `json:"start_date"`
	EndDate                 time.Time `json:"end_date"`
	PaymentDueDay           int32     `json:"payment_due_day"`
	MonthlyRentValue        string    `json:"monthly_rent_value"`
	PaintingFeeTotal        string    `json:"painting_fee_total"`
	PaintingFeeInstallments int32     `json:"painting_fee_installments"`
	PaintingFeePaid         string    `json:"painting_fee_paid"`
	Status                  string    `json:"status"`
	CreatedAt               time.Time `json:"created_at"`
	UpdatedAt               time.Time `json:"updated_at"`
	UnitNumber              string    `json:"unit_number"`
	UnitFloor               int32     `json:"unit_floor"`
	TenantName              string    `json:"tenant_name"`
	TenantCpf               string    `json:"tenant_cpf"`
	TenantPhone             string    `json:"tenant_phone"`
}

func (q *Queries) GetLeaseWithDetails(ctx context.Context, id uuid.UUID) (GetLeaseWithDetailsRow, error) {
	row := q.db.QueryRowContext(ctx, getLeaseWithDetails, id)
	var i GetLeaseWithDetailsRow
	err := row.Scan(
		&i.ID,
		&i.UnitID,
		&i.TenantID,
		&i.ContractSignedDate,
		&i.StartDate,
		&i.EndDate,
		&i.PaymentDueDay,
		&i.MonthlyRentValue,
		&i.PaintingFeeTotal,
		&i.PaintingFeeInstallments,
		&i.PaintingFeePaid,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UnitNumber,
		&i.UnitFloor,
		&i.TenantName,
		&i.TenantCpf,
		&i.TenantPhone,
	)
	return i, err
}

const listLeases = `-- name: ListLeases :many
SELECT id, unit_id, tenant_id, contract_signed_date, start_date, end_date, payment_due_day, monthly_rent_value, painting_fee_total, painting_fee_installments, painting_fee_paid, status, created_at, updated_at FROM leases
ORDER BY created_at DESC
`

func (q *Queries) ListLeases(ctx context.Context) ([]Lease, error) {
	rows, err := q.db.QueryContext(ctx, listLeases)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Lease{}
	for rows.Next() {
		var i Lease
		if err := rows.Scan(
			&i.ID,
			&i.UnitID,
			&i.TenantID,
			&i.ContractSignedDate,
			&i.StartDate,
			&i.EndDate,
			&i.PaymentDueDay,
			&i.MonthlyRentValue,
			&i.PaintingFeeTotal,
			&i.PaintingFeeInstallments,
			&i.PaintingFeePaid,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listLeasesByStatus = `-- name: ListLeasesByStatus :many
SELECT id, unit_id, tenant_id, contract_signed_date, start_date, end_date, payment_due_day, monthly_rent_value, painting_fee_total, painting_fee_installments, painting_fee_paid, status, created_at, updated_at FROM leases
WHERE status = $1
ORDER BY created_at DESC
`

func (q *Queries) ListLeasesByStatus(ctx context.Context, status string) ([]Lease, error) {
	rows, err := q.db.QueryContext(ctx, listLeasesByStatus, status)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Lease{}
	for rows.Next() {
		var i Lease
		if err := rows.Scan(
			&i.ID,
			&i.UnitID,
			&i.TenantID,
			&i.ContractSignedDate,
			&i.StartDate,
			&i.EndDate,
			&i.PaymentDueDay,
			&i.MonthlyRentValue,
			&i.PaintingFeeTotal,
			&i.PaintingFeeInstallments,
			&i.PaintingFeePaid,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listLeasesByTenantID = `-- name: ListLeasesByTenantID :many
SELECT id, unit_id, tenant_id, contract_signed_date, start_date, end_date, payment_due_day, monthly_rent_value, painting_fee_total, painting_fee_installments, painting_fee_paid, status, created_at, updated_at FROM leases
WHERE tenant_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListLeasesByTenantID(ctx context.Context, tenantID uuid.UUID) ([]Lease, error) {
	rows, err := q.db.QueryContext(ctx, listLeasesByTenantID, tenantID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Lease{}
	for rows.Next() {
		var i Lease
		if err := rows.Scan(
			&i.ID,
			&i.UnitID,
			&i.TenantID,
			&i.ContractSignedDate,
			&i.StartDate,
			&i.EndDate,
			&i.PaymentDueDay,
			&i.MonthlyRentValue,
			&i.PaintingFeeTotal,
			&i.PaintingFeeInstallments,
			&i.PaintingFeePaid,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listLeasesByUnitID = `-- name: ListLeasesByUnitID :many
SELECT id, unit_id, tenant_id, contract_signed_date, start_date, end_date, payment_due_day, monthly_rent_value, painting_fee_total, painting_fee_installments, painting_fee_paid, status, created_at, updated_at FROM leases
WHERE unit_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListLeasesByUnitID(ctx context.Context, unitID uuid.UUID) ([]Lease, error) {
	rows, err := q.db.QueryContext(ctx, listLeasesByUnitID, unitID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Lease{}
	for rows.Next() {
		var i Lease
		if err := rows.Scan(
			&i.ID,
			&i.UnitID,
			&i.TenantID,
			&i.ContractSignedDate,
			&i.StartDate,
			&i.EndDate,
			&i.PaymentDueDay,
			&i.MonthlyRentValue,
			&i.PaintingFeeTotal,
			&i.PaintingFeeInstallments,
			&i.PaintingFeePaid,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listLeasesWithDetails = `-- name: ListLeasesWithDetails :many
SELECT 
    l.id, l.unit_id, l.tenant_id, l.contract_signed_date, l.start_date, l.end_date, l.payment_due_day, l.monthly_rent_value, l.painting_fee_total, l.painting_fee_installments, l.painting_fee_paid, l.status, l.created_at, l.updated_at,
    u.number as unit_number,
    u.floor as unit_floor,
    t.full_name as tenant_name,
    t.cpf as tenant_cpf,
    t.phone as tenant_phone
FROM leases l
INNER JOIN units u ON l.unit_id = u.id
INNER JOIN tenants t ON l.tenant_id = t.id
ORDER BY l.created_at DESC
`

type ListLeasesWithDetailsRow struct {
	ID                      uuid.UUID `json:"id"`
	UnitID                  uuid.UUID `json:"unit_id"`
	TenantID                uuid.UUID `json:"tenant_id"`
	ContractSignedDate      time.Time `json:"contract_signed_date"`
	StartDate               time.Time `json:"start_date"`
	EndDate                 time.Time `json:"end_date"`
	PaymentDueDay           int32     `json:"payment_due_day"`
	MonthlyRentValue        string    `json:"monthly_rent_value"`
	PaintingFeeTotal        string    `json:"painting_fee_total"`
	PaintingFeeInstallments int32     `json:"painting_fee_installments"`
	PaintingFeePaid         string    `json:"painting_fee_paid"`
	Status                  string    `json:"status"`
	CreatedAt               time.Time `json:"created_at"`
	UpdatedAt               time.Time `json:"updated_at"`
	UnitNumber              string    `json:"unit_number"`
	UnitFloor               int32     `json:"unit_floor"`
	TenantName              string    `json:"tenant_name"`
	TenantCpf               string    `json:"tenant_cpf"`
	TenantPhone             string    `json:"tenant_phone"`
}

func (q *Queries) ListLeasesWithDetails(ctx context.Context) ([]ListLeasesWithDetailsRow, error) {
	rows, err := q.db.QueryContext(ctx, listLeasesWithDetails)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListLeasesWithDetailsRow{}
	for rows.Next() {
		var i ListLeasesWithDetailsRow
		if err := rows.Scan(
			&i.ID,
			&i.UnitID,
			&i.TenantID,
			&i.ContractSignedDate,
			&i.StartDate,
			&i.EndDate,
			&i.PaymentDueDay,
			&i.MonthlyRentValue,
			&i.PaintingFeeTotal,
			&i.PaintingFeeInstallments,
			&i.PaintingFeePaid,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UnitNumber,
			&i.UnitFloor,
			&i.TenantName,
			&i.TenantCpf,
			&i.TenantPhone,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateLease = `-- name: UpdateLease :one
UPDATE leases
SET
    unit_id = $2,
    tenant_id = $3,
    contract_signed_date = $4,
    start_date = $5,
    end_date = $6,
    payment_due_day = $7,
    monthly_rent_value = $8,
    painting_fee_total = $9,
    painting_fee_installments = $10,
    painting_fee_paid = $11,
    status = $12,
    updated_at = $13
WHERE id = $1
RETURNING id, unit_id, tenant_id, contract_signed_date, start_date, end_date, payment_due_day, monthly_rent_value, painting_fee_total, painting_fee_installments, painting_fee_paid, status, created_at, updated_at
`

type UpdateLeaseParams struct {
	ID                      uuid.UUID `json:"id"`
	UnitID                  uuid.UUID `json:"unit_id"`
	TenantID                uuid.UUID `json:"tenant_id"`
	ContractSignedDate      time.Time `json:"contract_signed_date"`
	StartDate               time.Time `json:"start_date"`
	EndDate                 time.Time `json:"end_date"`
	PaymentDueDay           int32     `json:"payment_due_day"`
	MonthlyRentValue        string    `json:"monthly_rent_value"`
	PaintingFeeTotal        string    `json:"painting_fee_total"`
	PaintingFeeInstallments int32     `json:"painting_fee_installments"`
	PaintingFeePaid         string    `json:"painting_fee_paid"`
	Status                  string    `json:"status"`
	UpdatedAt               time.Time `json:"updated_at"`
}

func (q *Queries) UpdateLease(ctx context.Context, arg UpdateLeaseParams) (Lease, error) {
	row := q.db.QueryRowContext(ctx, updateLease,
		arg.ID,
		arg.UnitID,
		arg.TenantID,
		arg.ContractSignedDate,
		arg.StartDate,
		arg.EndDate,
		arg.PaymentDueDay,
		arg.MonthlyRentValue,
		arg.PaintingFeeTotal,
		arg.PaintingFeeInstallments,
		arg.PaintingFeePaid,
		arg.Status,
		arg.UpdatedAt,
	)
	var i Lease
	err := row.Scan(
		&i.ID,
		&i.UnitID,
		&i.TenantID,
		&i.ContractSignedDate,
		&i.StartDate,
		&i.EndDate,
		&i.PaymentDueDay,
		&i.MonthlyRentValue,
		&i.PaintingFeeTotal,
		&i.PaintingFeeInstallments,
		&i.PaintingFeePaid,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateLeaseStatus = `-- name: UpdateLeaseStatus :one
UPDATE leases
SET
    status = $2,
    updated_at = $3
WHERE id = $1
RETURNING id, unit_id, tenant_id, contract_signed_date, start_date, end_date, payment_due_day, monthly_rent_value, painting_fee_total, painting_fee_installments, painting_fee_paid, status, created_at, updated_at
`

type UpdateLeaseStatusParams struct {
	ID        uuid.UUID `json:"id"`
	Status    string    `json:"status"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (q *Queries) UpdateLeaseStatus(ctx context.Context, arg UpdateLeaseStatusParams) (Lease, error) {
	row := q.db.QueryRowContext(ctx, updateLeaseStatus, arg.ID, arg.Status, arg.UpdatedAt)
	var i Lease
	err := row.Scan(
		&i.ID,
		&i.UnitID,
		&i.TenantID,
		&i.ContractSignedDate,
		&i.StartDate,
		&i.EndDate,
		&i.PaymentDueDay,
		&i.MonthlyRentValue,
		&i.PaintingFeeTotal,
		&i.PaintingFeeInstallments,
		&i.PaintingFeePaid,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updatePaintingFeePaid = `-- name: UpdatePaintingFeePaid :one
UPDATE leases
SET
    painting_fee_paid = $2,
    updated_at = $3
WHERE id = $1
RETURNING id, unit_id, tenant_id, contract_signed_date, start_date, end_date, payment_due_day, monthly_rent_value, painting_fee_total, painting_fee_installments, painting_fee_paid, status, created_at, updated_at
`

type UpdatePaintingFeePaidParams struct {
	ID              uuid.UUID `json:"id"`
	PaintingFeePaid string    `json:"painting_fee_paid"`
	UpdatedAt       time.Time `json:"updated_at"`
}

func (q *Queries) UpdatePaintingFeePaid(ctx context.Context, arg UpdatePaintingFeePaidParams) (Lease, error) {
	row := q.db.QueryRowContext(ctx, updatePaintingFeePaid, arg.ID, arg.PaintingFeePaid, arg.UpdatedAt)
	var i Lease
	err := row.Scan(
		&i.ID,
		&i.UnitID,
		&i.TenantID,
		&i.ContractSignedDate,
		&i.StartDate,
		&i.EndDate,
		&i.PaymentDueDay,
		&i.MonthlyRentValue,
		&i.PaintingFeeTotal,
		&i.PaintingFeeInstallments,
		&i.PaintingFeePaid,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
